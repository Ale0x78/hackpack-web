amazing_rop:
  title: amazing-rop
  about: Beginner ROP challenge from pbCTF 2020
  connect: nc 4.tcp.ngrok.io 16875
  file_path: /challenge_files/amazing_rop_dist.tar.gz
  flag_MD5: 18c11cef1dc29a707b38db4bfc1ca5a5

xor_crypto1:
  title: XOR Crypto - Intro
  about: |
      Decode these two keys from Base64 and XOR them keys to get the flag! <br> <br>
      Be sure to do this as part of a script; you will need that code for the next two challenges.
  file_path: /challenge_files/xor_crypto/ciphertext1.txt
  flag_MD5: f3f21959eb2474ae86505891cc674d3c # hackpack{XOR_A_WIZARD_HARRY}

xor_crypto2:
  title: XOR Crypto - Easy-ish
  about: |
      This ciphertext has been XOR encrypted with a single length key. <br> <br>
      For example, if the key was <code>f</code>, each byte of the plaintext would be XORed with <code>f</code>. <br> <br>
      The cipher text is also in Base64, which you'll need to decode before XORing
  file_path: /challenge_files/xor_crypto/ciphertext2.txt
  flag_MD5: 1df5b08797f2e128618117d2983b5cfb # HACKPACK{WHAT_A_KAFKAESQUE_CHALLENGE}
  flag_format: HACKPACK{...}

xor_crypto3:
  title: XOR Crypto - Medium
  about: |
      This ciphertext has been XOR encrypted with key of unknown length. <br> <br>
      For instance, if the key was <code>wot</code>, the first byte of the plaintext would be XORed with <code>w</code>, the second with <code>o</code>, the third with <code>t</code>, and then it would loop around to XOR the fourth character with <code>w</code> <br> <br>
      The cipher text is also in Base64, which you'll need to decode before XORing
  file_path: /challenge_files/xor_crypto/ciphertext3.txt
  flag_MD5: e8ef8ea4ddecbf90e7fd049832db0220 # HACKPACK{MAYBE_NOW_YOULL_READ_THE_TOS_;)}
  flag_format: HACKPACK{...}

intro_to_re_01:
  title: "picoGym RE, Part I: Need for Speed"
  about: |
    <h4>Original Description</h4>
    <p>The name of the game is <a href="https://www.youtube.com/watch?v=8piqd2BWeGI">speed</a>.
    Are you quick enough to solve this problem and keep it above 50 mph?</p>

    <h4>Advice</h4>
    <p>Use <a href="https://ghidra-sre.org/">Ghidra</a> to look at the binary's <code>main</code> function and figure out what is happening.
    From there, you have options (which is common for RE problems):
    <ul>
      <li>Static RE: just read the disassembly/decompiler output until you can work out on paper/etc. what the answer is
      <li>Dynamic RE: use a debugger like GDB (or other options, like LD_PRELOAD) to manipulate the flow of execution in the program and side-step the booby-trap
    </ul></p>
  file_path: /challenge_files/intro_to_re/need-for-speed
  flag_MD5: 493e3603dc1b1cf9ff71a0ce6c0b03a3 # PICOCTF{Good job keeping bus #24c43740 speeding along!}
  flag_format: PICOCTF{...}

intro_to_re_02:
  title: "picoGym RE, Part II: Reverse Cipher"
  about: |
    <h4>Original Description</h4>
    <p>We have recovered a binary and a text file. Can you reverse the flag?</p>

    <h4>Advice</h4>
    <p>Use Ghidra to understand the cipher algorithm.  Then write a simple program (e.g., in Python) to reverse that algorithm and decipher the flag.</p>
  file_path: /challenge_files/intro_to_re/reverse-cipher.zip
  flag_MD5: 5e7b2f5015770cdb18aa7ee070b6a962 # picoCTF{r3v3rs37ee84d27}
  flag_format: picoCTF{...}

intro_to_re_03:
  title: "picoGym RE, Part III: Forky"
  about: |
    <h4>Original Description</h4>
    <p>In this program, identify the last integer value that is passed as parameter to the function <code>doNothing()</code>.</p>

    <h4>Advice</h4>
    <p>Treat this as a pure-static RE problem.
    You need to understand the semantics of the Unix system call <code>fork</code>
    (and that processes can share memory, as they do in this case to have one single
    copy of the key veriable stored between all of them).</p>
    
    <p>The flag is in the format <code>picoCTF{INTEGER_YOU_FOUND}</code>.
    Be aware that <code>INTEGER_YOU_FOUND</code> can be negative.
    You will have to consider:
    <ul>
      <li>machine word sizes (e.g., 32-bit vs. 64-bit integers) 
      <li>2's complement binary encoding of signed numbers
      <li>multi-byte integer Endianness
    </ul></p>
  file_path: /challenge_files/intro_to_re/forky
  flag_MD5: 94369eee02c2a4c20f191c7c593d6600 # picoCTF{-721750240}
  flag_format: picoCTF{INTEGER_YOU_FOUND}

intro_to_re_04:
  title: "picoGym RE, Part IV: Assembly #4"
  about: |
    <h4>Original Description</h4>
    <p>What will <code>asm4("picoCTF_724a2")</code> return?
    Submit the flag as a hexadecimal value (starting with '0x').
    NOTE: Your submission for this question will NOT be in the normal [picoCtf] flag format.</p>

    <h4>Advice</h4>
    <p>You are given a disassembly dump of a function taking a C string and returning an integer;
    you need to figure out the integer returned for the string given above.</p>
    <p>No cheating with Ghidra this time!  (<i>Not strictly true; but if you
    get it into a form where Ghidra can help, you have it in a form where you don't really need Ghidra anymore...</i>)</p>
    <p>The obvious solution is to manually decompile this assembly into C code that you can compile and run.
    Of course, this approach requires some understanding of 
    <ul>
      <li>32-bit x86 (a.k.a. i386 or i686) assembly language syntax and machine instruction semantics
      <li>the C calling convention (a.k.a. ABI) for GCC/Linux (i.e., how the compiler and system libraries use registers, the stack, etc.)
    </ul>
    A great resource for exploring these (in the C -> assembly direction) is <a href="https://godbolt.org/">Godbolt's Compiler Explorer</a>.
    </p>

    <p>There's also the "cheating" way, which get's us back to my first comment about getting it into a form usable with Ghidra.
    Question to ponder: can you just "assemble" this source code back into an ELF binary module that could be loaded by Ghidra?
    If not, why not?  What then?</p>
  file_path: /challenge_files/intro_to_re/asm4.S
  flag_MD5: 8eaed559146b3f2a013abadf6eca7b68 # 0x20c
  flag_format: 0x...

intro_to_re_05:
  title: "picoGym RE, Part V: B1ll_Gat35"
  about: |
    <h4>Original Description</h4>
    <p>Can you reverse this Windows Binary?</p>

    <h4>Advice</h4>
    <p>This is not quite a <i>classic</i> RE challenge that simply validates a flag you have to enter, but it's close.</p>
    <p>The flag format is <code>PICOCTF{xxxxx}</code></p>
    <p>This binary does not make for a pleasant experience in Ghidra if you aren't used to the quirks of Microsoft's C/C++ toolchain.
    The original picoCtf hints recommending using a Windows VM and Windows debugging tools like OllyDbg are worth considering.</p>
    <p>But it can be run and even debugged on a Linux system using Wine's <code>winedbg</code> toolchain.
    Given a little persistence and cleverness in Ghidra finding critical points inside the program,
    the Wine debugger is sufficient for you to side-step the obstacles and get a flag printed out.</p>
  file_path: /challenge_files/intro_to_re/win-exec-1.zip
  flag_MD5: 6a869501b88d73d529490849e9bbbeae # PICOCTF{These are the access codes to the vault: 1063340}

intro_to_web_01:
  title: "Treasure Hunting"
  about: |
    <h4>Description</h4>
    <p>Hmm, do pirates really think they can hide a treasure without us knowing? Find the treasure and prove they are wrong</p>
    <p>This is basic web challenges. Only some level of poking is needed. Access the website here: <a href="http://e30f62bed013.ngrok.io/">link</a></p>
    <p>Flag format: hackpack{...}</p>
  connect: http://f06e7ae2850b.ngrok.io/
  flag_MD5: 4191d8b8e46ae501a023538ea3177736

intro_to_web_02:
  title: "Traveler"
  about: |
    <h4>Description</h4>
    <p>Visit our pages to see our awesomeness! Look for the 'flag' file"</p>
    <p>Flag format: hackpack{...}</p>
  connect: http://f6c513837e34.ngrok.io/
  flag_MD5: 7cda24b0cdbb72da9fb4a2e2ab6d1510

intro_to_web_03:
  title: "Custom-ui"
  about: |
    <h4>Description</h4>
    <p>How often do you visit the website just to bounce back because of bad design? Now we developed a new feature, which gives you ability to change the design!</p>
    <p>Flag format: hackpack{...}</p>
  connect: http://7c17007ea2bf.ngrok.io/
  flag_MD5: e3be81762372ef91a0f2660d4f75ef01

juice_shop:
  title: "Juice Shop"
  about: |
    <h4>Description</h4>
    <p>This is the most advanced vulnerable application on the web! How many vulnerabilities can you find?</p>
  connect: http://c5e3ab53b447.ngrok.io/

pico_web_01:
  title: "logon"
  about: |
    <h4>Description</h4>
    <p>Can you log in as admin?<p>
    <p>Flag format: picoCTF{...}</p>
  connect: https://jupiter.challenges.picoctf.org/problem/44573/
  flag_MD5: dd972230bac79e6a0f646d512c5c4e55 
  flag_format: picoCTF{...}


pico_web_02:
  title: "Irish Name Repo 3"
  about: |
    <h4>Description</h4>
    <p>Can you get logged in as the administrator? It's not as simple as it looks...</p>
    <p>UPDATE: The flag will have a random token string at the end. To submit the flag in a way that we can check, remove the last portion (separated by _) and submit.</p>
    <p>Flag format: picoCTF{...}</p>
  connect: https://jupiter.challenges.picoctf.org/problem/29132/
  flag_MD5: a233e26db4f6026e208d0d5b60d408d9
  flag_format: picoCTF{...}

pico_web_03:
  title: "JaWT"
  about: |
    <h4>Description</h4>
    <p>Have you heard of JWT?</p>
    <p>Flag format: picoCTF{...}</p>
  connect: https://jupiter.challenges.picoctf.org/problem/61864/
  flag_MD5: fb02c3fb225abdc19f66c8836f033693
  flag_format: picoCTF{...}
  
malware_workshop1:
  title: "Not My Password"
  about: |
    <strong><h3>DO NOT RUN OUTSIDE A VIRTUAL MACHINE</h3></strong>
    <h4>This file will record all keystrokes and save them to C:/ProgramData/Log. It will not send any information anywhere else.</h4>
    We have found the following malware on our top secret server. We also intercepted the following file that the malware tried to send out. Can you see what info they tried to steal?
  file_path: /challenge_files/malware_workshop/PackLogger.zip
  flag_MD5: 093BF970EACA620EF1B9E9E079FC8655 # hackpack{w0W_th3_h43k_i5_stron7}

malware_workshop2:
  title: "Is this the real exe or just a fantac++"
  about: |
    This executable seems to be loading another executable into memory. Can you solve this? 
  file_path: /challenge_files/malware_workshop/runner.zip
  flag_MD5: 69816037a19643dc263788d979a2b44d # hackpack{w0w_70u_4r3_l33t_h4x0r}

snort_rules:
  title: Writing Snort IDS rules 
  about: |
      This challenge is centered around analyzing pcaps from 
      malware running in a virtual machine and writing rules
      to detect the malicious traffic via Snort, a network
      intrusion detection system (IDS). </br>
      
      The talk on 4/9/2021
      will discuss how to use Wireshark to inspect PCAPs and
      provide an overiew of how to write Snort rules, but the
      ultimate goal of this challenge is for anyone interested
      to be able to write a Snort rule that detects real
      malware and then have the Snort rule added into the 
      official Snort community ruleset.<br><br>
      The currently available challenge problems are:<br>
      <ul><li><a href="https://github.com/recvfrom/contributor/issues/6">Predator the Thief C2 traffic</a></li>
          <li><a href="https://github.com/recvfrom/contributor/issues/7">PonyStealer Exfil Attempts</a></li>
          <li><a href="https://github.com/recvfrom/contributor/issues/8">TVRat / TeamSpy C2 Traffic</a></li></ul>
      <br>
      To coordinate working on the challenge problems, either post in the GitHub issue or in the Discord. Working 
      together is allowed, and more problems can be posted if
      needed.<br>
      
title: Steganography 101
  about: |
      Enjoy the meme while you warm up a stego skill you'll be using a lot in this challenge set.
  file_path: /challenge_files/meme.png (attached)
  flag_MD5: c06297a0192d965d8ecabd44363751c6